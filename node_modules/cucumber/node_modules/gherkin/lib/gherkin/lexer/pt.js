
/* line 1 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */
;(function() {


/* line 126 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */



/* line 11 "js/lib/gherkin/lexer/pt.js" */
const _lexer_actions = [
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 16, 1, 
	17, 1, 18, 1, 19, 1, 20, 1, 
	21, 1, 22, 1, 23, 2, 2, 18, 
	2, 3, 4, 2, 13, 0, 2, 14, 
	15, 2, 17, 0, 2, 17, 1, 2, 
	17, 16, 2, 17, 19, 2, 18, 6, 
	2, 18, 7, 2, 18, 8, 2, 18, 
	9, 2, 18, 10, 2, 18, 16, 2, 
	20, 21, 2, 22, 0, 2, 22, 1, 
	2, 22, 16, 2, 22, 19, 3, 4, 
	14, 15, 3, 5, 14, 15, 3, 11, 
	14, 15, 3, 12, 14, 15, 3, 13, 
	14, 15, 3, 14, 15, 18, 3, 17, 
	0, 11, 3, 17, 14, 15, 4, 2, 
	14, 15, 18, 4, 3, 4, 14, 15, 
	4, 17, 0, 14, 15, 5, 17, 0, 
	11, 14, 15
];

const _lexer_key_offsets = [
	0, 0, 17, 33, 34, 35, 37, 39, 
	44, 49, 54, 59, 63, 67, 69, 70, 
	71, 72, 73, 74, 75, 76, 77, 78, 
	79, 80, 81, 82, 83, 84, 85, 87, 
	89, 94, 101, 106, 108, 109, 111, 112, 
	113, 114, 115, 116, 117, 118, 132, 134, 
	136, 138, 140, 142, 144, 146, 148, 150, 
	152, 154, 156, 158, 160, 162, 178, 179, 
	180, 182, 184, 188, 189, 191, 192, 193, 
	194, 195, 196, 197, 198, 199, 200, 201, 
	202, 203, 204, 205, 207, 208, 209, 210, 
	211, 212, 213, 214, 228, 230, 232, 234, 
	236, 238, 240, 242, 244, 246, 248, 250, 
	252, 254, 256, 258, 260, 262, 265, 267, 
	269, 271, 273, 275, 277, 279, 282, 285, 
	288, 290, 293, 295, 297, 299, 301, 303, 
	305, 307, 309, 311, 313, 315, 317, 319, 
	321, 323, 325, 327, 329, 331, 333, 335, 
	336, 337, 338, 339, 340, 341, 342, 343, 
	344, 351, 353, 355, 357, 359, 361, 363, 
	365, 367, 369, 371, 373, 375, 377, 379, 
	380, 381, 382, 383, 384, 385, 386, 387, 
	388, 389, 390, 391, 392, 393, 394, 395, 
	405, 407, 409, 411, 413, 415, 417, 419, 
	421, 423, 425, 427, 429, 431, 433, 436, 
	438, 441, 443, 445, 447, 449, 451, 453, 
	455, 457, 459, 461, 464, 466, 468, 470, 
	472, 474, 476, 478, 480, 482, 484, 486, 
	488, 490, 492, 494, 496, 498, 500, 502, 
	504, 506, 508, 510, 512, 514, 516, 518, 
	520, 522, 524, 525, 526, 527, 528, 529, 
	530, 534, 540, 543, 545, 551, 567, 570, 
	572, 575, 577, 579, 581, 583, 585, 587, 
	589, 591, 593, 595, 597, 599, 602, 605, 
	609, 611, 614, 616, 618, 620, 622, 624, 
	626, 628, 630, 632, 634, 636, 638, 640, 
	642, 644, 646, 648, 650, 652, 654, 656, 
	658, 660, 662, 664, 666, 668, 670, 672, 
	674, 676, 678, 679, 680, 681, 682, 683, 
	684, 685, 686, 687, 701, 703, 705, 707, 
	709, 711, 713, 715, 717, 719, 721, 723, 
	725, 727, 729, 731, 733, 735, 738, 740, 
	742, 744, 746, 748, 750, 752, 755, 758, 
	762, 764, 767, 769, 771, 773, 775, 777, 
	779, 781, 783, 785, 787, 789, 791, 793, 
	795, 797, 799, 801, 803, 805, 807, 809, 
	811, 813, 815, 817, 819, 821, 823, 825, 
	827, 829, 830, 831
];

const _lexer_trans_keys = [
	10, 32, 34, 35, 37, 42, 64, 67, 
	68, 69, 70, 77, 81, 124, 239, 9, 
	13, 10, 32, 34, 35, 37, 42, 64, 
	67, 68, 69, 70, 77, 81, 124, 9, 
	13, 34, 34, 10, 13, 10, 13, 10, 
	32, 34, 9, 13, 10, 32, 34, 9, 
	13, 10, 32, 34, 9, 13, 10, 32, 
	34, 9, 13, 10, 32, 9, 13, 10, 
	32, 9, 13, 10, 13, 10, 95, 70, 
	69, 65, 84, 85, 82, 69, 95, 69, 
	78, 68, 95, 37, 32, 10, 13, 10, 
	13, 13, 32, 64, 9, 10, 9, 10, 
	13, 32, 64, 11, 12, 10, 32, 64, 
	9, 13, 101, 111, 110, -61, 97, -95, 
	114, 105, 111, 58, 10, 10, 10, 32, 
	35, 37, 42, 64, 67, 68, 69, 70, 
	77, 81, 9, 13, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	10, 32, 10, 32, 34, 35, 37, 42, 
	64, 67, 68, 69, 70, 77, 81, 124, 
	9, 13, 97, 100, 97, 111, 32, 115, 
	32, 110, 115, 120, 116, -61, 97, -93, 
	111, 113, 117, 101, 109, 97, 32, 100, 
	111, 32, 67, 101, 110, -61, 97, -95, 
	114, 105, 111, 58, 10, 10, 10, 32, 
	35, 37, 42, 64, 67, 68, 69, 70, 
	77, 81, 9, 13, 10, 95, 10, 70, 
	10, 69, 10, 65, 10, 84, 10, 85, 
	10, 82, 10, 69, 10, 95, 10, 69, 
	10, 78, 10, 68, 10, 95, 10, 37, 
	10, 32, 10, 101, 10, 110, -61, 10, 
	97, -95, 10, 10, 114, 10, 105, 10, 
	111, 10, 58, 10, 97, 10, 100, 10, 
	97, 111, 10, 32, 115, 10, 32, 110, 
	10, 116, -61, 10, 97, -93, 10, 10, 
	111, 10, 117, 10, 110, 10, 99, 10, 
	105, 10, 111, 10, 110, 10, 97, 10, 
	108, 10, 105, 10, 100, 10, 97, 10, 
	100, 10, 101, 10, 97, 10, 115, 10, 
	117, 10, 97, 10, 110, 10, 100, 101, 
	109, 112, 108, 111, 115, 58, 10, 10, 
	10, 32, 35, 70, 124, 9, 13, 10, 
	117, 10, 110, 10, 99, 10, 105, 10, 
	111, 10, 110, 10, 97, 10, 108, 10, 
	105, 10, 100, 10, 97, 10, 100, 10, 
	101, 10, 58, 117, 110, 99, 105, 111, 
	110, 97, 108, 105, 100, 97, 100, 101, 
	58, 10, 10, 10, 32, 35, 37, 64, 
	67, 69, 70, 9, 13, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, 10, 101, 111, 10, 110, -61, 10, 
	97, -95, 10, 10, 114, 10, 105, 10, 
	111, 10, 58, 10, 110, 10, 116, 10, 
	101, 10, 120, 10, 116, 10, 115, 120, 
	10, 113, 10, 117, 10, 101, 10, 109, 
	10, 97, 10, 32, 10, 100, 10, 111, 
	10, 32, 10, 67, 10, 101, 10, 101, 
	10, 109, 10, 112, 10, 108, 10, 111, 
	10, 115, 10, 117, 10, 110, 10, 99, 
	10, 105, 10, 111, 10, 110, 10, 97, 
	10, 108, 10, 105, 10, 100, 10, 97, 
	10, 100, 10, 101, 97, 115, 117, 97, 
	110, 100, 32, 124, 9, 13, 10, 32, 
	92, 124, 9, 13, 10, 92, 124, 10, 
	92, 10, 32, 92, 124, 9, 13, 10, 
	32, 34, 35, 37, 42, 64, 67, 68, 
	69, 70, 77, 81, 124, 9, 13, 10, 
	101, 111, 10, 110, -61, 10, 97, -95, 
	10, 10, 114, 10, 105, 10, 111, 10, 
	58, 10, 110, 10, 116, 10, 101, 10, 
	120, 10, 116, 10, 97, 10, 100, 10, 
	97, 111, 10, 32, 115, 10, 32, 110, 
	115, 10, 116, -61, 10, 97, -93, 10, 
	10, 111, 10, 113, 10, 117, 10, 101, 
	10, 109, 10, 97, 10, 32, 10, 100, 
	10, 111, 10, 32, 10, 67, 10, 101, 
	10, 117, 10, 110, 10, 99, 10, 105, 
	10, 111, 10, 110, 10, 97, 10, 108, 
	10, 105, 10, 100, 10, 97, 10, 100, 
	10, 101, 10, 97, 10, 115, 10, 117, 
	10, 97, 10, 110, 10, 100, 110, 116, 
	101, 120, 116, 111, 58, 10, 10, 10, 
	32, 35, 37, 42, 64, 67, 68, 69, 
	70, 77, 81, 9, 13, 10, 95, 10, 
	70, 10, 69, 10, 65, 10, 84, 10, 
	85, 10, 82, 10, 69, 10, 95, 10, 
	69, 10, 78, 10, 68, 10, 95, 10, 
	37, 10, 32, 10, 101, 10, 110, -61, 
	10, 97, -95, 10, 10, 114, 10, 105, 
	10, 111, 10, 58, 10, 97, 10, 100, 
	10, 97, 111, 10, 32, 115, 10, 32, 
	110, 115, 10, 116, -61, 10, 97, -93, 
	10, 10, 111, 10, 113, 10, 117, 10, 
	101, 10, 109, 10, 97, 10, 32, 10, 
	100, 10, 111, 10, 32, 10, 67, 10, 
	117, 10, 110, 10, 99, 10, 105, 10, 
	111, 10, 110, 10, 97, 10, 108, 10, 
	105, 10, 100, 10, 97, 10, 100, 10, 
	101, 10, 97, 10, 115, 10, 117, 10, 
	97, 10, 110, 10, 100, 187, 191, 0
];

const _lexer_single_lengths = [
	0, 15, 14, 1, 1, 2, 2, 3, 
	3, 3, 3, 2, 2, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 2, 2, 
	3, 5, 3, 2, 1, 2, 1, 1, 
	1, 1, 1, 1, 1, 12, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 14, 1, 1, 
	2, 2, 4, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	1, 1, 1, 12, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 3, 3, 3, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	5, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 8, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 1, 1, 1, 1, 1, 1, 
	2, 4, 3, 2, 4, 14, 3, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 3, 4, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 12, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 3, 3, 4, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 1, 0
];

const _lexer_range_lengths = [
	0, 1, 1, 0, 0, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 0, 0, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0
];

const _lexer_index_offsets = [
	0, 0, 17, 33, 35, 37, 40, 43, 
	48, 53, 58, 63, 67, 71, 74, 76, 
	78, 80, 82, 84, 86, 88, 90, 92, 
	94, 96, 98, 100, 102, 104, 106, 109, 
	112, 117, 124, 129, 132, 134, 137, 139, 
	141, 143, 145, 147, 149, 151, 165, 168, 
	171, 174, 177, 180, 183, 186, 189, 192, 
	195, 198, 201, 204, 207, 210, 226, 228, 
	230, 233, 236, 241, 243, 246, 248, 250, 
	252, 254, 256, 258, 260, 262, 264, 266, 
	268, 270, 272, 274, 277, 279, 281, 283, 
	285, 287, 289, 291, 305, 308, 311, 314, 
	317, 320, 323, 326, 329, 332, 335, 338, 
	341, 344, 347, 350, 353, 356, 360, 363, 
	366, 369, 372, 375, 378, 381, 385, 389, 
	393, 396, 400, 403, 406, 409, 412, 415, 
	418, 421, 424, 427, 430, 433, 436, 439, 
	442, 445, 448, 451, 454, 457, 460, 463, 
	465, 467, 469, 471, 473, 475, 477, 479, 
	481, 488, 491, 494, 497, 500, 503, 506, 
	509, 512, 515, 518, 521, 524, 527, 530, 
	532, 534, 536, 538, 540, 542, 544, 546, 
	548, 550, 552, 554, 556, 558, 560, 562, 
	572, 575, 578, 581, 584, 587, 590, 593, 
	596, 599, 602, 605, 608, 611, 614, 618, 
	621, 625, 628, 631, 634, 637, 640, 643, 
	646, 649, 652, 655, 659, 662, 665, 668, 
	671, 674, 677, 680, 683, 686, 689, 692, 
	695, 698, 701, 704, 707, 710, 713, 716, 
	719, 722, 725, 728, 731, 734, 737, 740, 
	743, 746, 749, 751, 753, 755, 757, 759, 
	761, 765, 771, 775, 778, 784, 800, 804, 
	807, 811, 814, 817, 820, 823, 826, 829, 
	832, 835, 838, 841, 844, 847, 851, 855, 
	860, 863, 867, 870, 873, 876, 879, 882, 
	885, 888, 891, 894, 897, 900, 903, 906, 
	909, 912, 915, 918, 921, 924, 927, 930, 
	933, 936, 939, 942, 945, 948, 951, 954, 
	957, 960, 963, 965, 967, 969, 971, 973, 
	975, 977, 979, 981, 995, 998, 1001, 1004, 
	1007, 1010, 1013, 1016, 1019, 1022, 1025, 1028, 
	1031, 1034, 1037, 1040, 1043, 1046, 1050, 1053, 
	1056, 1059, 1062, 1065, 1068, 1071, 1075, 1079, 
	1084, 1087, 1091, 1094, 1097, 1100, 1103, 1106, 
	1109, 1112, 1115, 1118, 1121, 1124, 1127, 1130, 
	1133, 1136, 1139, 1142, 1145, 1148, 1151, 1154, 
	1157, 1160, 1163, 1166, 1169, 1172, 1175, 1178, 
	1181, 1184, 1186, 1188
];

const _lexer_indicies = [
	2, 1, 3, 4, 5, 6, 7, 8, 
	9, 10, 11, 12, 13, 14, 15, 1, 
	0, 2, 1, 3, 4, 5, 6, 7, 
	8, 9, 10, 11, 12, 13, 14, 1, 
	0, 16, 0, 17, 0, 19, 20, 18, 
	22, 23, 21, 26, 25, 27, 25, 24, 
	30, 29, 31, 29, 28, 30, 29, 32, 
	29, 28, 30, 29, 33, 29, 28, 35, 
	34, 34, 0, 2, 36, 36, 0, 38, 
	39, 37, 2, 0, 40, 0, 41, 0, 
	42, 0, 43, 0, 44, 0, 45, 0, 
	46, 0, 47, 0, 48, 0, 49, 0, 
	50, 0, 51, 0, 52, 0, 53, 0, 
	54, 0, 56, 57, 55, 59, 60, 58, 
	0, 0, 0, 0, 61, 62, 63, 62, 
	62, 65, 64, 61, 2, 66, 7, 66, 
	0, 67, 68, 0, 69, 0, 70, 71, 
	0, 71, 0, 72, 0, 73, 0, 74, 
	0, 75, 0, 77, 76, 79, 78, 79, 
	80, 81, 82, 83, 81, 84, 85, 86, 
	87, 88, 89, 80, 78, 79, 90, 78, 
	79, 91, 78, 79, 92, 78, 79, 93, 
	78, 79, 94, 78, 79, 95, 78, 79, 
	96, 78, 79, 97, 78, 79, 98, 78, 
	79, 99, 78, 79, 100, 78, 79, 101, 
	78, 79, 102, 78, 79, 103, 78, 79, 
	104, 78, 106, 105, 107, 108, 109, 110, 
	111, 112, 113, 114, 115, 116, 117, 118, 
	105, 0, 119, 0, 120, 0, 121, 121, 
	0, 54, 122, 0, 54, 123, 124, 125, 
	0, 126, 0, 127, 128, 0, 128, 0, 
	122, 0, 129, 0, 130, 0, 131, 0, 
	132, 0, 133, 0, 134, 0, 135, 0, 
	136, 0, 137, 0, 138, 0, 139, 0, 
	140, 0, 141, 142, 0, 142, 0, 143, 
	0, 144, 0, 145, 0, 146, 0, 148, 
	147, 150, 149, 150, 151, 152, 153, 154, 
	152, 155, 156, 157, 158, 159, 160, 151, 
	149, 150, 161, 149, 150, 162, 149, 150, 
	163, 149, 150, 164, 149, 150, 165, 149, 
	150, 166, 149, 150, 167, 149, 150, 168, 
	149, 150, 169, 149, 150, 170, 149, 150, 
	171, 149, 150, 172, 149, 150, 173, 149, 
	150, 174, 149, 150, 175, 149, 150, 176, 
	149, 150, 177, 149, 178, 150, 179, 149, 
	179, 150, 149, 150, 180, 149, 150, 181, 
	149, 150, 182, 149, 150, 175, 149, 150, 
	183, 149, 150, 184, 149, 150, 185, 185, 
	149, 150, 175, 186, 149, 150, 175, 187, 
	149, 150, 188, 149, 189, 150, 190, 149, 
	190, 150, 149, 150, 186, 149, 150, 191, 
	149, 150, 192, 149, 150, 193, 149, 150, 
	194, 149, 150, 195, 149, 150, 196, 149, 
	150, 197, 149, 150, 198, 149, 150, 199, 
	149, 150, 200, 149, 150, 201, 149, 150, 
	202, 149, 150, 182, 149, 150, 203, 149, 
	150, 186, 149, 150, 204, 149, 150, 205, 
	149, 150, 206, 149, 150, 190, 149, 207, 
	0, 208, 0, 209, 0, 210, 0, 211, 
	0, 212, 0, 213, 0, 215, 214, 217, 
	216, 217, 218, 219, 220, 219, 218, 216, 
	217, 221, 216, 217, 222, 216, 217, 223, 
	216, 217, 224, 216, 217, 225, 216, 217, 
	226, 216, 217, 227, 216, 217, 228, 216, 
	217, 229, 216, 217, 230, 216, 217, 231, 
	216, 217, 232, 216, 217, 233, 216, 217, 
	234, 216, 235, 0, 236, 0, 237, 0, 
	238, 0, 239, 0, 240, 0, 241, 0, 
	242, 0, 243, 0, 244, 0, 245, 0, 
	246, 0, 247, 0, 248, 0, 250, 249, 
	252, 251, 252, 253, 254, 255, 254, 256, 
	257, 258, 253, 251, 252, 259, 251, 252, 
	260, 251, 252, 261, 251, 252, 262, 251, 
	252, 263, 251, 252, 264, 251, 252, 265, 
	251, 252, 266, 251, 252, 267, 251, 252, 
	268, 251, 252, 269, 251, 252, 270, 251, 
	252, 271, 251, 252, 272, 251, 252, 273, 
	274, 251, 252, 275, 251, 276, 252, 277, 
	251, 277, 252, 251, 252, 278, 251, 252, 
	279, 251, 252, 280, 251, 252, 281, 251, 
	252, 282, 251, 252, 283, 251, 252, 284, 
	251, 252, 285, 251, 252, 279, 251, 252, 
	286, 287, 251, 252, 288, 251, 252, 289, 
	251, 252, 290, 251, 252, 291, 251, 252, 
	292, 251, 252, 293, 251, 252, 294, 251, 
	252, 295, 251, 252, 296, 251, 252, 297, 
	251, 252, 273, 251, 252, 298, 251, 252, 
	299, 251, 252, 300, 251, 252, 301, 251, 
	252, 302, 251, 252, 280, 251, 252, 303, 
	251, 252, 304, 251, 252, 305, 251, 252, 
	306, 251, 252, 307, 251, 252, 308, 251, 
	252, 309, 251, 252, 310, 251, 252, 311, 
	251, 252, 312, 251, 252, 313, 251, 252, 
	314, 251, 252, 280, 251, 315, 0, 122, 
	0, 316, 0, 317, 0, 318, 0, 128, 
	0, 319, 320, 319, 0, 323, 322, 324, 
	325, 322, 321, 0, 327, 328, 326, 0, 
	327, 326, 323, 329, 327, 328, 329, 326, 
	323, 330, 331, 332, 333, 334, 335, 336, 
	337, 338, 339, 340, 341, 342, 330, 0, 
	79, 343, 344, 78, 79, 345, 78, 346, 
	79, 347, 78, 347, 79, 78, 79, 348, 
	78, 79, 349, 78, 79, 350, 78, 79, 
	104, 78, 79, 351, 78, 79, 352, 78, 
	79, 353, 78, 79, 354, 78, 79, 349, 
	78, 79, 355, 78, 79, 356, 78, 79, 
	357, 357, 78, 79, 104, 358, 78, 79, 
	104, 359, 360, 78, 79, 361, 78, 362, 
	79, 363, 78, 363, 79, 78, 79, 358, 
	78, 79, 364, 78, 79, 365, 78, 79, 
	366, 78, 79, 367, 78, 79, 368, 78, 
	79, 369, 78, 79, 370, 78, 79, 371, 
	78, 79, 372, 78, 79, 373, 78, 79, 
	343, 78, 79, 374, 78, 79, 375, 78, 
	79, 376, 78, 79, 377, 78, 79, 378, 
	78, 79, 379, 78, 79, 380, 78, 79, 
	381, 78, 79, 382, 78, 79, 383, 78, 
	79, 384, 78, 79, 385, 78, 79, 350, 
	78, 79, 386, 78, 79, 358, 78, 79, 
	387, 78, 79, 388, 78, 79, 389, 78, 
	79, 363, 78, 390, 0, 391, 0, 392, 
	0, 393, 0, 394, 0, 395, 0, 396, 
	0, 398, 397, 400, 399, 400, 401, 402, 
	403, 404, 402, 405, 406, 407, 408, 409, 
	410, 401, 399, 400, 411, 399, 400, 412, 
	399, 400, 413, 399, 400, 414, 399, 400, 
	415, 399, 400, 416, 399, 400, 417, 399, 
	400, 418, 399, 400, 419, 399, 400, 420, 
	399, 400, 421, 399, 400, 422, 399, 400, 
	423, 399, 400, 424, 399, 400, 425, 399, 
	400, 426, 399, 400, 427, 399, 428, 400, 
	429, 399, 429, 400, 399, 400, 430, 399, 
	400, 431, 399, 400, 432, 399, 400, 425, 
	399, 400, 433, 399, 400, 434, 399, 400, 
	435, 435, 399, 400, 425, 436, 399, 400, 
	425, 437, 438, 399, 400, 439, 399, 440, 
	400, 441, 399, 441, 400, 399, 400, 436, 
	399, 400, 442, 399, 400, 443, 399, 400, 
	444, 399, 400, 445, 399, 400, 446, 399, 
	400, 447, 399, 400, 448, 399, 400, 449, 
	399, 400, 450, 399, 400, 451, 399, 400, 
	452, 399, 400, 453, 399, 400, 454, 399, 
	400, 455, 399, 400, 456, 399, 400, 457, 
	399, 400, 458, 399, 400, 459, 399, 400, 
	460, 399, 400, 461, 399, 400, 462, 399, 
	400, 463, 399, 400, 432, 399, 400, 464, 
	399, 400, 436, 399, 400, 465, 399, 400, 
	466, 399, 400, 467, 399, 400, 441, 399, 
	468, 0, 1, 0, 469, 0
];

const _lexer_trans_targs = [
	0, 2, 2, 3, 13, 15, 29, 32, 
	35, 62, 66, 167, 242, 244, 248, 377, 
	4, 5, 6, 7, 6, 6, 7, 6, 
	8, 8, 8, 9, 8, 8, 8, 9, 
	10, 11, 12, 2, 12, 13, 2, 14, 
	16, 17, 18, 19, 20, 21, 22, 23, 
	24, 25, 26, 27, 28, 379, 30, 31, 
	2, 14, 31, 2, 14, 33, 34, 2, 
	33, 32, 34, 36, 306, 37, 38, 39, 
	40, 41, 42, 43, 44, 45, 44, 45, 
	45, 2, 46, 60, 254, 267, 271, 287, 
	300, 302, 47, 48, 49, 50, 51, 52, 
	53, 54, 55, 56, 57, 58, 59, 2, 
	61, 2, 2, 3, 13, 15, 29, 32, 
	35, 62, 66, 167, 242, 244, 248, 63, 
	64, 65, 29, 67, 71, 143, 68, 69, 
	70, 72, 73, 74, 75, 76, 77, 78, 
	79, 80, 81, 82, 83, 84, 85, 86, 
	87, 88, 89, 90, 91, 90, 91, 91, 
	2, 92, 106, 107, 115, 119, 124, 137, 
	139, 93, 94, 95, 96, 97, 98, 99, 
	100, 101, 102, 103, 104, 105, 2, 61, 
	108, 109, 110, 111, 112, 113, 114, 116, 
	117, 118, 106, 120, 121, 122, 123, 125, 
	126, 127, 128, 129, 130, 131, 132, 133, 
	134, 135, 136, 138, 140, 141, 142, 144, 
	145, 146, 147, 148, 149, 150, 151, 152, 
	151, 152, 152, 2, 153, 154, 155, 156, 
	157, 158, 159, 160, 161, 162, 163, 164, 
	165, 166, 61, 168, 169, 170, 171, 172, 
	173, 174, 175, 176, 177, 178, 179, 180, 
	181, 182, 183, 182, 183, 183, 2, 184, 
	198, 211, 229, 185, 186, 187, 188, 189, 
	190, 191, 192, 193, 194, 195, 196, 197, 
	2, 199, 206, 200, 201, 202, 203, 204, 
	205, 61, 207, 208, 209, 210, 212, 223, 
	213, 214, 215, 216, 217, 218, 219, 220, 
	221, 222, 224, 225, 226, 227, 228, 230, 
	231, 232, 233, 234, 235, 236, 237, 238, 
	239, 240, 241, 243, 245, 246, 247, 248, 
	249, 250, 252, 253, 251, 249, 250, 251, 
	249, 252, 253, 3, 13, 15, 29, 32, 
	35, 62, 66, 167, 242, 244, 248, 255, 
	262, 256, 257, 258, 259, 260, 261, 263, 
	264, 265, 266, 268, 269, 270, 60, 272, 
	276, 273, 274, 275, 277, 278, 279, 280, 
	281, 282, 283, 284, 285, 286, 288, 289, 
	290, 291, 292, 293, 294, 295, 296, 297, 
	298, 299, 301, 303, 304, 305, 307, 308, 
	309, 310, 311, 312, 313, 314, 315, 314, 
	315, 315, 2, 316, 330, 331, 339, 343, 
	358, 371, 373, 317, 318, 319, 320, 321, 
	322, 323, 324, 325, 326, 327, 328, 329, 
	2, 61, 332, 333, 334, 335, 336, 337, 
	338, 340, 341, 342, 330, 344, 348, 345, 
	346, 347, 349, 350, 351, 352, 353, 354, 
	355, 356, 357, 331, 359, 360, 361, 362, 
	363, 364, 365, 366, 367, 368, 369, 370, 
	372, 374, 375, 376, 378, 0
];

const _lexer_trans_actions = [
	43, 0, 54, 3, 1, 0, 29, 1, 
	29, 29, 29, 29, 29, 29, 35, 0, 
	0, 0, 7, 139, 48, 0, 102, 9, 
	5, 45, 134, 45, 0, 33, 122, 33, 
	33, 0, 11, 106, 0, 0, 114, 25, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 57, 
	149, 126, 0, 110, 23, 0, 27, 118, 
	27, 51, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 57, 144, 0, 54, 
	0, 75, 33, 84, 84, 84, 84, 84, 
	84, 84, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 17, 
	17, 31, 130, 60, 57, 31, 63, 57, 
	63, 63, 63, 63, 63, 63, 66, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 57, 144, 0, 54, 0, 
	78, 33, 84, 84, 84, 84, 84, 84, 
	84, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 19, 19, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 57, 144, 
	0, 54, 0, 81, 84, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 21, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 57, 144, 0, 54, 0, 69, 33, 
	84, 84, 84, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	13, 0, 0, 0, 0, 0, 0, 0, 
	0, 13, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 37, 37, 54, 37, 87, 0, 0, 
	39, 0, 0, 93, 90, 41, 96, 90, 
	96, 96, 96, 96, 96, 96, 99, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 57, 144, 0, 
	54, 0, 72, 33, 84, 84, 84, 84, 
	84, 84, 84, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	15, 15, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0
];

const _lexer_eof_actions = [
	0, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43
];

const lexer_start = 1;
const lexer_first_final = 379;
const lexer_error = 0;

const lexer_en_main = 1;


/* line 129 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

/* line 130 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

/* line 131 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

var Lexer = function(listener) {
  // Check that listener has the required functions
  var events = ['comment', 'tag', 'feature', 'background', 'scenario', 'scenario_outline', 'examples', 'step', 'doc_string', 'row', 'eof'];
  for(e in events) {
    var event = events[e];
    if(typeof listener[event] != 'function') {
      "Error. No " + event + " function exists on " + JSON.stringify(listener);
    }
  }
  this.listener = listener;  
};

Lexer.prototype.scan = function(data) {
  var ending = "\n%_FEATURE_END_%";
  if(typeof data == 'string') {
    data = this.stringToBytes(data + ending);
  } else if(typeof Buffer != 'undefined' && Buffer.isBuffer(data)) {
    // Node.js
    var buf = new Buffer(data.length + ending.length);
    data.copy(buf, 0, 0);
    new Buffer(ending).copy(buf, data.length, 0);
    data = buf;
  }
  var eof = pe = data.length;
  var p = 0;

  this.line_number = 1;
  this.last_newline = 0;

  
/* line 716 "js/lib/gherkin/lexer/pt.js" */
{
	  this.cs = lexer_start;
} /* JSCodeGen::writeInit */

/* line 162 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */
  
/* line 723 "js/lib/gherkin/lexer/pt.js" */
{
	var _klen, _trans, _keys, _ps, _widec, _acts, _nacts;
	var _goto_level, _resume, _eof_trans, _again, _test_eof;
	var _out;
	_klen = _trans = _keys = _acts = _nacts = null;
	_goto_level = 0;
	_resume = 10;
	_eof_trans = 15;
	_again = 20;
	_test_eof = 30;
	_out = 40;
	while (true) {
	_trigger_goto = false;
	if (_goto_level <= 0) {
	if (p == pe) {
		_goto_level = _test_eof;
		continue;
	}
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	}
	if (_goto_level <= _resume) {
	_keys = _lexer_key_offsets[ this.cs];
	_trans = _lexer_index_offsets[ this.cs];
	_klen = _lexer_single_lengths[ this.cs];
	_break_match = false;
	
	do {
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + _klen - 1;

	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + ( (_upper - _lower) >> 1 );

	        if ( data[p] < _lexer_trans_keys[_mid]) {
	           _upper = _mid - 1;
	        } else if ( data[p] > _lexer_trans_keys[_mid]) {
	           _lower = _mid + 1;
	        } else {
	           _trans += (_mid - _keys);
	           _break_match = true;
	           break;
	        };
	     } /* while */
	     if (_break_match) { break; }
	     _keys += _klen;
	     _trans += _klen;
	  }
	  _klen = _lexer_range_lengths[ this.cs];
	  if (_klen > 0) {
	     _lower = _keys;
	     _upper = _keys + (_klen << 1) - 2;
	     while (true) {
	        if (_upper < _lower) { break; }
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1);
	        if ( data[p] < _lexer_trans_keys[_mid]) {
	          _upper = _mid - 2;
	         } else if ( data[p] > _lexer_trans_keys[_mid+1]) {
	          _lower = _mid + 2;
	        } else {
	          _trans += ((_mid - _keys) >> 1);
	          _break_match = true;
	          break;
	        }
	     } /* while */
	     if (_break_match) { break; }
	     _trans += _klen
	  }
	} while (false);
	_trans = _lexer_indicies[_trans];
	 this.cs = _lexer_trans_targs[_trans];
	if (_lexer_trans_actions[_trans] != 0) {
		_acts = _lexer_trans_actions[_trans];
		_nacts = _lexer_actions[_acts];
		_acts += 1;
		while (_nacts > 0) {
			_nacts -= 1;
			_acts += 1;
			switch (_lexer_actions[_acts - 1]) {
case 0:
/* line 6 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    this.content_start = p;
    this.current_line = this.line_number;
    this.start_col = p - this.last_newline - (this.keyword+':').length;
  		break;
case 1:
/* line 12 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    this.current_line = this.line_number;
    this.start_col = p - this.last_newline;
  		break;
case 2:
/* line 17 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    this.content_start = p;
  		break;
case 3:
/* line 21 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    this.docstring_content_type_start = p;
  		break;
case 4:
/* line 25 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    this.docstring_content_type_end = p;
  		break;
case 5:
/* line 29 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    var con = this.unindent(
      this.start_col, 
      this.bytesToString(data.slice(this.content_start, this.next_keyword_start-1)).replace(/(\r?\n)?([\t ])*$/, '').replace(/\\\"\\\"\\\"/mg, '"""')
    );
    var con_type = this.bytesToString(data.slice(this.docstring_content_type_start, this.docstring_content_type_end)).trim();
    this.listener.doc_string(con_type, con, this.current_line); 
  		break;
case 6:
/* line 38 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    p = this.store_keyword_content('feature', data, p, eof);
  		break;
case 7:
/* line 42 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    p = this.store_keyword_content('background', data, p, eof);
  		break;
case 8:
/* line 46 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    p = this.store_keyword_content('scenario', data, p, eof);
  		break;
case 9:
/* line 50 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    p = this.store_keyword_content('scenario_outline', data, p, eof);
  		break;
case 10:
/* line 54 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    p = this.store_keyword_content('examples', data, p, eof);
  		break;
case 11:
/* line 58 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.step(this.keyword, con, this.current_line);
  		break;
case 12:
/* line 63 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.comment(con, this.line_number);
    this.keyword_start = null;
  		break;
case 13:
/* line 69 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    this.listener.tag(con, this.line_number);
    this.keyword_start = null;
  		break;
case 14:
/* line 75 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    this.line_number++;
  		break;
case 15:
/* line 79 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    this.last_newline = p + 1;
  		break;
case 16:
/* line 83 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    this.keyword_start = this.keyword_start || p;
  		break;
case 17:
/* line 87 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    this.keyword = this.bytesToString(data.slice(this.keyword_start, p)).replace(/:$/, '');
    this.keyword_start = null;
  		break;
case 18:
/* line 92 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    this.next_keyword_start = p;
  		break;
case 19:
/* line 96 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    p = p - 1;
    current_row = [];
    this.current_line = this.line_number;
  		break;
case 20:
/* line 102 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    this.content_start = p;
  		break;
case 21:
/* line 106 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    var con = this.bytesToString(data.slice(this.content_start, p)).trim();
    current_row.push(con.replace(/\\\|/, "|").replace(/\\n/, "\n").replace(/\\\\/, "\\"));
  		break;
case 22:
/* line 111 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    this.listener.row(current_row, this.current_line);
  		break;
case 23:
/* line 115 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 950 "js/lib/gherkin/lexer/pt.js" */
			} /* action switch */
		}
	}
	if (_trigger_goto) {
		continue;
	}
	}
	if (_goto_level <= _again) {
	if ( this.cs == 0) {
		_goto_level = _out;
		continue;
	}
	p += 1;
	if (p != pe) {
		_goto_level = _resume;
		continue;
	}
	}
	if (_goto_level <= _test_eof) {
	if (p == eof) {
	__acts = _lexer_eof_actions[ this.cs];
	__nacts =  _lexer_actions[__acts];
	__acts += 1;
	while (__nacts > 0) {
		__nacts -= 1;
		__acts += 1;
		switch (_lexer_actions[__acts - 1]) {
case 23:
/* line 115 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */

    if(this.cs < lexer_first_final) {
      var content = this.current_line_content(data, p);
      throw "Lexing error on line " + this.line_number + ": '" + content + "'. See http://wiki.github.com/cucumber/gherkin/lexingerror for more information.";
    } else {
      this.listener.eof();
    }
    
  		break;
/* line 989 "js/lib/gherkin/lexer/pt.js" */
		} /* eof action switch */
	}
	if (_trigger_goto) {
		continue;
	}
}
	}
	if (_goto_level <= _out) {
		break;
	}
	}
	}

/* line 163 "/Users/ahellesoy/scm/gherkin/tasks/../ragel/i18n/pt.js.rl" */
};

Lexer.prototype.bytesToString = function(bytes) {
  if(typeof bytes.write == 'function') {
    // Node.js
    return bytes.toString('utf-8');
  } else {
    var result = "";
    for(var b in bytes) {
      result += String.fromCharCode(bytes[b]);
    }
    return result;
  }
};

Lexer.prototype.stringToBytes = function(string) {
  var bytes = [];
  for(var i = 0; i < string.length; i++) {
    bytes[i] = string.charCodeAt(i);
  }
  return bytes;
};

Lexer.prototype.unindent = function(startcol, text) {
  startcol = startcol || 0;
  return text.replace(new RegExp('^[\t ]{0,' + startcol + '}', 'gm'), ''); 
};

Lexer.prototype.store_keyword_content = function(event, data, p, eof) {
  var end_point = (!this.next_keyword_start || (p == eof)) ? p : this.next_keyword_start;
  var content = this.unindent(this.start_col + 2, this.bytesToString(data.slice(this.content_start, end_point))).replace(/\s+$/,"");
  var content_lines = content.split("\n")
  var name = content_lines.shift() || "";
  name = name.trim();
  var description = content_lines.join("\n");
  this.listener[event](this.keyword, name, description, this.current_line);
  var nks = this.next_keyword_start;
  this.next_keyword_start = null;
  return nks ? nks - 1 : p;
};

Lexer.prototype.current_line_content = function(data, p) {
  var rest = data.slice(this.last_newline, -1);
  var end = rest.indexOf(10) || -1;
  return this.bytesToString(rest.slice(0, end)).trim();
};

// Node.js export
if(typeof exports !== 'undefined') {
  exports.Lexer = Lexer;
}
// Require.js export
if (typeof define !== 'undefined') {
  if(define.amd) {
    define('gherkin/lexer/pt', [], function() {
      return Lexer
    });
  } else {
    define('gherkin/lexer/pt', function(require, exports, module) {
      exports.Lexer = Lexer;
    });
  }
}

})();
